name: Deploy to AWS ECR

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: multi-spa-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get AWS Account ID
        id: get-account-id
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "aws-account-id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Check if ECR repository exists
        id: check-repo
        run: |
          if aws ecr describe-repositories --region ${{ env.AWS_REGION }} --repository-names ${{ env.ECR_REPOSITORY }} >/dev/null 2>&1; then
            echo "Repository exists"
            echo "repo-exists=true" >> $GITHUB_OUTPUT
          else
            echo "Repository does not exist"
            echo "repo-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create ECR repository if it doesn't exist
        if: steps.check-repo.outputs.repo-exists == 'false'
        run: |
          aws ecr create-repository \
            --region ${{ env.AWS_REGION }} \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256

      - name: Set image tag
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set-tag.outputs.image-tag }}
        run: |
          # Dockerイメージをビルド
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # 追加のタグ付け（mainブランチの場合はlatestタグも付ける）
          if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "$IMAGE_TAG" != "latest" ]; then
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          fi
          
          # ECRにプッシュ
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Image digest
        run: |
          echo "Image has been pushed to ECR successfully!"
          echo "Repository: ${{ env.ECR_REPOSITORY }}"
          echo "Tag: ${{ steps.set-tag.outputs.image-tag }}"
          echo "Full URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.image-tag }}"
